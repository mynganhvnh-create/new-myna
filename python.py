import streamlit as st
import pandas as pd
import numpy as np
import base64
import json
from google import genai
from google.genai.errors import APIError

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh",
    layout="wide"
)

st.title("·ª®ng d·ª•ng ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n (NPV, IRR, PP, DPP) üí∞")
st.markdown("S·ª≠ d·ª•ng AI ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng s·ªë t√†i ch√≠nh t·ª´ file Word (.docx) v√† ƒë√°nh gi√° d·ª± √°n.")

# --- Thi·∫øt l·∫≠p Session State ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu ---
if 'extracted_params' not in st.session_state:
    st.session_state.extracted_params = None
if 'project_metrics' not in st.session_state:
    st.session_state.project_metrics = None

# --- Kh√≥a API (L·∫•y t·ª´ Streamlit Secrets) ---
GEMINI_API_KEY = st.secrets.get("GEMINI_API_KEY")

# --- Helper: Chuy·ªÉn ƒë·ªïi Bytes sang Base64 ---
def bytes_to_base64(byte_data):
    """Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu bytes th√†nh chu·ªói base64."""
    return base64.b64encode(byte_data).decode('utf-8')

# --- Helper: T√≠nh th·ªùi gian ho√†n v·ªën (PP) v√† ho√†n v·ªën c√≥ chi·∫øt kh·∫•u (DPP) ---
def calculate_payback_periods(cash_flows, discount_rate):
    """T√≠nh Payback Period (PP) v√† Discounted Payback Period (DPP)."""
    
    T = len(cash_flows) - 1 # S·ªë nƒÉm d·ª± √°n (t·ª´ nƒÉm 1)
    initial_investment = -cash_flows[0]
    
    # 1. PP (Th·ªùi gian ho√†n v·ªën)
    cumulative_cf = np.cumsum(cash_flows[1:])
    pp = 0.0
    for i in range(T):
        if cumulative_cf[i] >= initial_investment:
            # Ho√†n v·ªën trong nƒÉm th·ª© i+1
            # pp = i + 1 + (V·ªën c√≤n thi·∫øu / CF nƒÉm i+1)
            remaining_capital = initial_investment - (cumulative_cf[i-1] if i > 0 else 0)
            pp = (i + 1) + (remaining_capital / cash_flows[i+1])
            break
        elif i == T - 1:
            pp = float('inf') # D·ª± √°n kh√¥ng ho√†n v·ªën

    # 2. DPP (Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)
    discounted_cf = cash_flows[1:] / (1 + discount_rate) ** np.arange(1, T + 1)
    cumulative_dcf = np.cumsum(discounted_cf)
    dpp = 0.0
    for i in range(T):
        if cumulative_dcf[i] >= initial_investment:
            # Ho√†n v·ªën trong nƒÉm th·ª© i+1
            # dpp = i + 1 + (V·ªën chi·∫øt kh·∫•u c√≤n thi·∫øu / DCF nƒÉm i+1)
            remaining_d_capital = initial_investment - (cumulative_dcf[i-1] if i > 0 else 0)
            dpp = (i + 1) + (remaining_d_capital / discounted_cf[i])
            break
        elif i == T - 1:
            dpp = float('inf') # D·ª± √°n kh√¥ng ho√†n v·ªën

    return pp, dpp

# --- Ch·ª©c nƒÉng 1: Tr√≠ch xu·∫•t th√¥ng s·ªë t√†i ch√≠nh t·ª´ DOCX b·∫±ng AI (S·ª≠ d·ª•ng JSON Schema) ---
def extract_financial_params(base64_data, api_key):
    """S·ª≠ d·ª•ng Gemini ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng s·ªë t√†i ch√≠nh t·ª´ file DOCX."""
    if not api_key:
        return "L·ªói API: Kh√¥ng t√¨m th·∫•y Kh√≥a API 'GEMINI_API_KEY'."

    st.warning("Xin l∆∞u √Ω: Vi·ªác tr√≠ch xu·∫•t s·∫Ω hi·ªáu qu·∫£ nh·∫•t n·∫øu c√°c ch·ªâ s·ªë ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p r√µ r√†ng trong t√†i li·ªáu Word.")

    try:
        client = genai.Client(api_key=api_key)
        
        prompt = """
        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh. H√£y tr√≠ch xu·∫•t c√°c th√¥ng s·ªë sau t·ª´ t√†i li·ªáu Word ƒë∆∞·ª£c cung c·∫•p. 
        ƒê∆°n v·ªã ti·ªÅn t·ªá (V·ªën, Doanh thu, Chi ph√≠) l√† VND v√† ph·∫£i ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng d∆∞·ªõi d·∫°ng s·ªë nguy√™n (integer). 
        ƒê∆°n v·ªã c·ªßa WACC v√† Thu·∫ø l√† t·ª∑ l·ªá (v√≠ d·ª•: 10% l√† 0.1). 
        ƒê∆°n v·ªã c·ªßa D√≤ng ƒë·ªùi d·ª± √°n l√† s·ªë nƒÉm (integer). 
        N·∫øu kh√¥ng t√¨m th·∫•y b·∫•t k·ª≥ th√¥ng s·ªë n√†o, h√£y ƒë·∫∑t gi√° tr·ªã l√† 0.
        """

        # ƒê·ªãnh nghƒ©a JSON Schema ƒë·ªÉ bu·ªôc AI tr·∫£ v·ªÅ c·∫•u tr√∫c d·ªØ li·ªáu mong mu·ªën
        response_schema = {
            "type": "OBJECT",
            "properties": {
                "initialInvestment": {"type": "NUMBER", "description": "T·ªïng v·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (t·∫°i nƒÉm 0) (VND)"},
                "projectLifespan": {"type": "INTEGER", "description": "D√≤ng ƒë·ªùi d·ª± √°n theo nƒÉm"},
                "annualRevenue": {"type": "NUMBER", "description": "Doanh thu h√†ng nƒÉm (gi·∫£ ƒë·ªãnh c·ªë ƒë·ªãnh) (VND)"},
                "annualCost": {"type": "NUMBER", "description": "Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm (gi·∫£ ƒë·ªãnh c·ªë ƒë·ªãnh) (VND)"},
                "wacc": {"type": "NUMBER", "description": "T·ª∑ l·ªá Chi ph√≠ v·ªën b√¨nh qu√¢n (WACC - D·∫°ng th·∫≠p ph√¢n, v√≠ d·ª• 0.1)"},
                "taxRate": {"type": "NUMBER", "description": "Thu·∫ø su·∫•t doanh nghi·ªáp (D·∫°ng th·∫≠p ph√¢n, v√≠ d·ª• 0.2)"}
            },
            "required": ["initialInvestment", "projectLifespan", "annualRevenue", "annualCost", "wacc", "taxRate"]
        }
        
        # T·∫°o Payload API
        payload = {
            "contents": [
                {
                    "role": "user",
                    "parts": [
                        {"text": prompt},
                        {
                            "inlineData": {
                                "mimeType": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                "data": base64_data
                            }
                        }
                    ]
                }
            ],
            "config": {
                "response_mime_type": "application/json",
                "response_schema": response_schema,
            },
            "model": "gemini-2.5-flash-preview-05-20"
        }

        # G·ªçi API
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=payload['contents'],
            config=payload['config']
        )
        
        # Ph√¢n t√≠ch k·∫øt qu·∫£ JSON
        json_text = response.text.strip()
        return json.loads(json_text)

    except APIError as e:
        return {"error": f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API. Chi ti·∫øt l·ªói: {e}"}
    except json.JSONDecodeError:
        return {"error": "L·ªói ph√¢n t√≠ch JSON t·ª´ AI. Vui l√≤ng th·ª≠ l·∫°i v·ªõi t√†i li·ªáu r√µ r√†ng h∆°n."}
    except Exception as e:
        return {"error": f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"}

# --- Ch·ª©c nƒÉng 2 & 3: X√¢y d·ª±ng d√≤ng ti·ªÅn v√† t√≠nh to√°n ch·ªâ s·ªë ---
@st.cache_data
def calculate_metrics(params):
    """X√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn v√† t√≠nh to√°n c√°c ch·ªâ s·ªë NPV, IRR, PP, DPP."""
    
    # √âp ki·ªÉu d·ªØ li·ªáu
    try:
        I = float(params['initialInvestment'])
        T = int(params['projectLifespan'])
        R = float(params['annualRevenue'])
        C = float(params['annualCost'])
        WACC = float(params['wacc'])
        Tax = float(params['taxRate'])
    except:
        raise ValueError("D·ªØ li·ªáu tr√≠ch xu·∫•t kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã thi·∫øu.")

    if T <= 0:
        raise ValueError("D√≤ng ƒë·ªùi d·ª± √°n ph·∫£i l·ªõn h∆°n 0.")
    if WACC <= 0:
        st.warning("WACC ƒë∆∞·ª£c ƒë·∫∑t l√† 0 ho·∫∑c √¢m. S·ª≠ d·ª•ng 10% (0.1) l√†m t·ª∑ l·ªá chi·∫øt kh·∫•u m·∫∑c ƒë·ªãnh.")
        WACC = 0.1
    
    # 1. T√≠nh to√°n D√≤ng ti·ªÅn (CF - Cash Flow)
    # Gi·∫£ ƒë·ªãnh: (Doanh thu - Chi ph√≠) l√† EBITDA. CF = (EBITDA * (1 - Thu·∫ø)) + Kh·∫•u hao (gi·∫£ ƒë·ªãnh = 0)
    # ƒê√¢y l√† m√¥ h√¨nh Cash Flow ƒë∆°n gi·∫£n nh·∫•t (sau thu·∫ø, ch∆∞a t√≠nh kh·∫•u hao/v·ªën l∆∞u ƒë·ªông)
    annual_net_cf = (R - C) * (1 - Tax) 

    # D√≤ng ti·ªÅn nƒÉm 0 (Initial Investment)
    cash_flows = [-I]
    
    # D√≤ng ti·ªÅn c√°c nƒÉm 1 ƒë·∫øn T
    cash_flows.extend([annual_net_cf] * T)
    
    # Chuy·ªÉn ƒë·ªïi sang m·∫£ng numpy ƒë·ªÉ t√≠nh to√°n t√†i ch√≠nh
    cf_array = np.array(cash_flows)
    
    # 2. T√≠nh NPV (Net Present Value)
    # Numpy npv t√≠nh t·ª´ nƒÉm 1, n√™n ph·∫£i c·ªông th√™m CF nƒÉm 0 (-I)
    npv = np.npv(WACC, cf_array[1:]) + cf_array[0] 
    
    # 3. T√≠nh IRR (Internal Rate of Return)
    irr = np.irr(cf_array)
    
    # 4. T√≠nh PP v√† DPP
    pp, dpp = calculate_payback_periods(cf_array, WACC)
    
    # Tr·∫£ v·ªÅ k·∫øt qu·∫£
    results = {
        'cash_flows': pd.DataFrame({'NƒÉm': list(range(T + 1)), 'D√≤ng Ti·ªÅn (CF)': cash_flows}),
        'metrics': {
            'NPV': npv,
            'IRR': irr,
            'PP': pp,
            'DPP': dpp,
            'WACC': WACC
        }
    }
    return results

# --- Ch·ª©c nƒÉng 4: Y√™u c·∫ßu AI ph√¢n t√≠ch c√°c ch·ªâ s·ªë ---
def get_ai_analysis(metrics, api_key):
    """G·ª≠i c√°c ch·ªâ s·ªë ƒë√°nh gi√° d·ª± √°n ƒë·∫øn Gemini API v√† nh·∫≠n ph√¢n t√≠ch."""
    if not api_key:
        return "L·ªói API: Kh√¥ng t√¨m th·∫•y Kh√≥a API 'GEMINI_API_KEY'."
    try:
        client = genai.Client(api_key=api_key)
        
        # Chuy·ªÉn ƒë·ªïi float('inf') th√†nh chu·ªói th√¢n thi·ªán cho AI
        irr_str = f"{metrics['IRR'] * 100:.2f}%"
        pp_str = f"{metrics['PP']:.2f} nƒÉm" if metrics['PP'] != float('inf') else "Kh√¥ng ho√†n v·ªën"
        dpp_str = f"{metrics['DPP']:.2f} nƒÉm" if metrics['DPP'] != float('inf') else "Kh√¥ng ho√†n v·ªën"

        data_for_ai = f"""
        WACC: {metrics['WACC'] * 100:.2f}%
        NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng): {metrics['NPV']:,.0f} VND
        IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô): {irr_str}
        PP (Th·ªùi gian ho√†n v·ªën): {pp_str}
        DPP (Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u): {dpp_str}
        """

        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh d·ª± √°n h√†ng ƒë·∫ßu. D·ª±a tr√™n c√°c ch·ªâ s·ªë sau c·ªßa d·ª± √°n, h√£y ƒë∆∞a ra m·ªôt ƒë√°nh gi√° chi ti·∫øt v√† k·∫øt lu·∫≠n. 
        ƒê√°nh gi√° c·∫ßn bao g·ªìm:
        1. Nh·∫≠n x√©t v·ªÅ NPV: D·ª± √°n c√≥ ƒë√°ng ƒë·∫ßu t∆∞ kh√¥ng? (NPV > 0)
        2. Nh·∫≠n x√©t v·ªÅ IRR so v·ªõi WACC: D·ª± √°n c√≥ kh·∫£ thi kh√¥ng? (IRR > WACC)
        3. Nh·∫≠n x√©t v·ªÅ PP v√† DPP: Kh·∫£ nƒÉng thu h·ªìi v·ªën nhanh hay ch·∫≠m.
        4. T√≥m t·∫Øt v√† ƒë∆∞a ra khuy·∫øn ngh·ªã cu·ªëi c√πng (Ch·∫•p nh·∫≠n hay T·ª´ ch·ªëi d·ª± √°n).

        D·ªØ li·ªáu ch·ªâ s·ªë:
        {data_for_ai}
        """

        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt
        )
        return response.text

    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh khi ph√¢n t√≠ch: {e}"

# --- Giao di·ªán Streamlit ---

# 1. T·∫£i File
uploaded_file = st.file_uploader(
    "1. T·∫£i file Word (.docx) ch·ª©a ph∆∞∆°ng √°n kinh doanh:",
    type=['docx']
)

# N√∫t K√≠ch ho·∫°t Tr√≠ch xu·∫•t D·ªØ li·ªáu
if uploaded_file is not None:
    if st.button("T·∫°o t√°c L·ªçc D·ªØ li·ªáu (AI Extraction)", type="primary"):
        if GEMINI_API_KEY:
            with st.spinner('ƒêang g·ª≠i file Word cho AI ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng s·ªë...'):
                # Chuy·ªÉn bytes file DOCX th√†nh base64
                docx_bytes = uploaded_file.read()
                base64_data = bytes_to_base64(docx_bytes)
                
                # Tr√≠ch xu·∫•t
                params = extract_financial_params(base64_data, GEMINI_API_KEY)
                
                if isinstance(params, dict) and 'error' not in params:
                    st.session_state.extracted_params = params
                    st.success("Tr√≠ch xu·∫•t th√¥ng s·ªë th√†nh c√¥ng!")
                else:
                    st.error(f"L·ªói tr√≠ch xu·∫•t: {params.get('error', 'Kh√¥ng th·ªÉ tr√≠ch xu·∫•t th√¥ng s·ªë.')}")
        else:
            st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API. Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets.")

# --- Hi·ªÉn th·ªã k·∫øt qu·∫£ Tr√≠ch xu·∫•t ---
if st.session_state.extracted_params:
    params = st.session_state.extracted_params
    st.divider()
    st.subheader("2. C√°c Th√¥ng s·ªë T√†i ch√≠nh ƒë∆∞·ª£c Tr√≠ch xu·∫•t:")
    
    # Hi·ªÉn th·ªã tham s·ªë d∆∞·ªõi d·∫°ng DataFrame
    params_df = pd.DataFrame([
        {"Ch·ªâ ti√™u": "V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (VND)", "Gi√° tr·ªã": f"{params['initialInvestment']:,.0f}"},
        {"Ch·ªâ ti√™u": "D√≤ng ƒë·ªùi d·ª± √°n (NƒÉm)", "Gi√° tr·ªã": f"{params['projectLifespan']}"},
        {"Ch·ªâ ti√™u": "Doanh thu h√†ng nƒÉm (VND)", "Gi√° tr·ªã": f"{params['annualRevenue']:,.0f}"},
        {"Ch·ªâ ti√™u": "Chi ph√≠ h√†ng nƒÉm (VND)", "Gi√° tr·ªã": f"{params['annualCost']:,.0f}"},
        {"Ch·ªâ ti√™u": "WACC (T·ª∑ l·ªá chi·∫øt kh·∫•u)", "Gi√° tr·ªã": f"{params['wacc'] * 100:.2f}%"},
        {"Ch·ªâ ti√™u": "Thu·∫ø su·∫•t doanh nghi·ªáp", "Gi√° tr·ªã": f"{params['taxRate'] * 100:.2f}%"},
    ])
    st.table(params_df)

    # --- Th·ª±c hi·ªán t√≠nh to√°n v√† hi·ªÉn th·ªã D√≤ng ti·ªÅn + Ch·ªâ s·ªë ---
    try:
        results = calculate_metrics(params)
        st.session_state.project_metrics = results['metrics']
        
        st.subheader("3. B·∫£ng D√≤ng ti·ªÅn (Cash Flow) c·ªßa D·ª± √°n")
        # ƒê·ªãnh d·∫°ng v√† hi·ªÉn th·ªã b·∫£ng d√≤ng ti·ªÅn
        cf_df = results['cash_flows']
        st.dataframe(
            cf_df.style.format({'D√≤ng Ti·ªÅn (CF)': '{:,.0f}'}), 
            use_container_width=True, 
            hide_index=True
        )

        st.subheader("4. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n")
        metrics = results['metrics']
        
        col_npv, col_irr, col_pp, col_dpp = st.columns(4)

        with col_npv:
            # NPV
            st.metric(
                label="Gi√° tr·ªã Hi·ªán t·∫°i R√≤ng (NPV)",
                value=f"{metrics['NPV']:,.0f} VND",
                delta="D·ª± √°n ch·∫•p nh·∫≠n ƒë∆∞·ª£c" if metrics['NPV'] > 0 else "D·ª± √°n b·ªã t·ª´ ch·ªëi"
            )
        with col_irr:
            # IRR
            st.metric(
                label="T·ª∑ su·∫•t Sinh l·ªùi N·ªôi b·ªô (IRR)",
                value=f"{metrics['IRR'] * 100:.2f}%"
            )
        with col_pp:
            # PP
            st.metric(
                label="Th·ªùi gian Ho√†n v·ªën (PP)",
                value=f"{metrics['PP']:.2f} nƒÉm" if metrics['PP'] != float('inf') else "Kh√¥ng ho√†n v·ªën"
            )
        with col_dpp:
            # DPP
            st.metric(
                label="Ho√†n v·ªën c√≥ Chi·∫øt kh·∫•u (DPP)",
                value=f"{metrics['DPP']:.2f} nƒÉm" if metrics['DPP'] != float('inf') else "Kh√¥ng ho√†n v·ªën"
            )
            
        st.caption(f"*T·ª∑ l·ªá chi·∫øt kh·∫•u WACC: {metrics['WACC'] * 100:.2f}%")

        # --- Y√™u c·∫ßu AI Ph√¢n t√≠ch ---
        st.divider()
        st.subheader("5. Ph√¢n t√≠ch Chuy√™n s√¢u t·ª´ AI")
        
        if st.button("Y√™u c·∫ßu AI Ph√¢n t√≠ch Hi·ªáu qu·∫£ D·ª± √°n", key='ai_analysis_button'):
            if GEMINI_API_KEY:
                with st.spinner('ƒêang g·ª≠i c√°c ch·ªâ s·ªë v√† ch·ªù Gemini ph√¢n t√≠ch...'):
                    ai_result = get_ai_analysis(metrics, GEMINI_API_KEY)
                    st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI:**")
                    st.info(ai_result)
            else:
                st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API. Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets.")


    except ValueError as ve:
        st.error(f"L·ªói T√≠nh to√°n D·ªØ li·ªáu: {ve}. Vui l√≤ng ki·ªÉm tra c√°c gi√° tr·ªã tr√≠ch xu·∫•t t·ª´ AI.")
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói khi t√≠nh to√°n c√°c ch·ªâ s·ªë: {e}")

else:
    st.info("Vui l√≤ng t·∫£i l√™n file Word v√† nh·∫•n n√∫t 'T·∫°o t√°c L·ªçc D·ªØ li·ªáu' ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
